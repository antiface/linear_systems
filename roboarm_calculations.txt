elvijs@elvijs-SATELLITE-L750 ~/Documents/linear_systems $ python
Python 2.7.4 (default, Sep 26 2013, 03:20:26) 
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from robotic_arm import *
>>> g = factor(roboarm.G[0])
>>> g
-33.3*(20.0*z**2 + 25.0*z + 972.0)/(200.0*z**4 + 250.0*z**3 + 13060.0*z**2 + 4175.0*z - 27216.0)
>>> pprint(g)
                 ⎛      2                 ⎞          
           -33.3⋅⎝20.0⋅z  + 25.0⋅z + 972.0⎠          
─────────────────────────────────────────────────────
       4          3            2                     
200.0⋅z  + 250.0⋅z  + 13060.0⋅z  + 4175.0⋅z - 27216.0
>>> g1 = g/(1 - g)
>>> g1
-33.3*(20.0*z**2 + 25.0*z + 972.0)/((33.3*(20.0*z**2 + 25.0*z + 972.0)/(200.0*z**4 + 250.0*z**3 + 13060.0*z**2 + 4175.0*z - 27216.0) + 1)*(200.0*z**4 + 250.0*z**3 + 13060.0*z**2 + 4175.0*z - 27216.0))
>>> g1 = factor(g1)
>>> g1
-333.0*(20.0*z**2 + 25.0*z + 972.0)/(2000.0*z**4 + 2500.0*z**3 + 137260.0*z**2 + 50075.0*z + 51516.0)
>>> pprint(g1)
                   ⎛      2                 ⎞            
            -333.0⋅⎝20.0⋅z  + 25.0⋅z + 972.0⎠            
─────────────────────────────────────────────────────────
        4           3             2                      
2000.0⋅z  + 2500.0⋅z  + 137260.0⋅z  + 50075.0⋅z + 51516.0
>>> g1_on_imaginary_axis = g1.subs(z, I * w)
>>> g1_on_imaginary_axis
-333.0*(-20.0*w**2 + 25.0*I*w + 972.0)/(2000.0*w**4 - 2500.0*I*w**3 - 137260.0*w**2 + 50075.0*I*w + 51516.0)
>>> pprint(g1_on_imaginary_axis)
                   ⎛        2                   ⎞            
            -333.0⋅⎝- 20.0⋅w  + 25.0⋅ⅈ⋅w + 972.0⎠            
─────────────────────────────────────────────────────────────
        4             3             2                        
2000.0⋅w  - 2500.0⋅ⅈ⋅w  - 137260.0⋅w  + 50075.0⋅ⅈ⋅w + 51516.0
>>> num_to_be_maximized = 333 * sqrt((972 - 20 * w**2)**2 + 25**2 * w**2)
>>> num_to_be_maximized
333*sqrt(625*w**2 + (-20*w**2 + 972)**2)
>>> pprint(num_to_be_maximized)
        ___________________________
       ╱                         2 
      ╱       2   ⎛      2      ⎞  
333⋅╲╱   625⋅w  + ⎝- 20⋅w  + 972⎠  
>>> simplify(num_to_be_maximized)
333*sqrt(400*w**4 - 38255*w**2 + 944784)
>>> factor(simplify(num_to_be_maximized))
333*sqrt(400*w**4 - 38255*w**2 + 944784)
>>> num_to_be_maximized = simplify(num_to_be_maximized)
>>> num_to_be_maximized
333*sqrt(400*w**4 - 38255*w**2 + 944784)
>>> pprint(num_to_be_maximized)
       ____________________________
      ╱      4          2          
333⋅╲╱  400⋅w  - 38255⋅w  + 944784 
>>> denom_to_be_max = sqrt((2000 * w**4 - 137260*w**2 + 51516)**2 + (50075*w - 2500 * w**3)**2)
>>> denom_to_be_max = simplify(denom_to_be_max)
>>> denom_to_be_max
sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)
>>> factor(denom_to_be_max)
sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)
>>> pprint(denom_to_be_max)
   ____________________________________________________________
  ╱          8              6                4                2
╲╱  4000000⋅w  - 542790000⋅w  + 18795996600⋅w  - 11634666695⋅w 

______________
              
 + 2653898256 
>>> to_max = num_to_be_maximized/denom_to_be_max
>>> to_max
333*sqrt(400*w**4 - 38255*w**2 + 944784)/sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)
>>> pprint(to_max)
                            ____________________________       
                           ╱      4          2                 
                     333⋅╲╱  400⋅w  - 38255⋅w  + 944784        
───────────────────────────────────────────────────────────────
   ____________________________________________________________
  ╱          8              6                4                2
╲╱  4000000⋅w  - 542790000⋅w  + 18795996600⋅w  - 11634666695⋅w 

              
              
              
──────────────
______________
              
 + 2653898256 
>>> d = to_max.diff(w)
>>> d
333*(800*w**3 - 38255*w)/(sqrt(400*w**4 - 38255*w**2 + 944784)*sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)) + 333*sqrt(400*w**4 - 38255*w**2 + 944784)*(-16000000*w**7 + 1628370000*w**5 - 37591993200*w**3 + 11634666695*w)/(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)**(3/2)
>>> solve(d, w)
[0]
>>> d = factor(d)
>>> d
-66600*w*(16000000*w**10 - 3380880000*w**8 + 283227034500*w**6 - 11264224526675*w**4 + 177570952924320*w**2 - 54453610304928)/(sqrt(400*w**4 - 38255*w**2 + 944784)*(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)**(3/2))
>>> pprint(d)
         ⎛          10               8                 6       
-66600⋅w⋅⎝16000000⋅w   - 3380880000⋅w  + 283227034500⋅w  - 1126
───────────────────────────────────────────────────────────────
      ____________________________                             
     ╱      4          2           ⎛         8              6  
   ╲╱  400⋅w  - 38255⋅w  + 944784 ⋅⎝4000000⋅w  - 542790000⋅w  +

            4                    2                 ⎞
4224526675⋅w  + 177570952924320⋅w  - 54453610304928⎠
────────────────────────────────────────────────────
                                              3/2   
              4                2             ⎞      
 18795996600⋅w  - 11634666695⋅w  + 2653898256⎠      
>>> d_num_part = 16000000*w**10   - 3380880000*w**8  + 283227034500*w**6  - 11264224526675*w**4  + 177570952924320*w**2  - 54453610304928
>>> d_num_part
16000000*w**10 - 3380880000*w**8 + 283227034500*w**6 - 11264224526675*w**4 + 177570952924320*w**2 - 54453610304928
>>> nroots(d_num_part)
[-8.30464613693769, -7.29035524520381 - 2.29302596068732*I, -7.29035524520381 + 2.29302596068732*I, -6.80017737732967, -0.559300533997749, 0.559300533997749, 6.80017737732967, 7.29035524520381 - 2.29302596068732*I, 7.29035524520381 + 2.29302596068732*I, 8.30464613693769]
>>> roots = nroots(d_num_part)
>>> roots
[-8.30464613693769, -7.29035524520381 - 2.29302596068732*I, -7.29035524520381 + 2.29302596068732*I, -6.80017737732967, -0.559300533997749, 0.559300533997749, 6.80017737732967, 7.29035524520381 - 2.29302596068732*I, 7.29035524520381 + 2.29302596068732*I, 8.30464613693769]
>>> roots = [roots[0], roots[3], roots[4], roots[5], roots[6], roots[9]]
>>> roots
[-8.30464613693769, -6.80017737732967, -0.559300533997749, 0.559300533997749, 6.80017737732967, 8.30464613693769]
>>> roots.append(0)
>>> to_max
333*sqrt(400*w**4 - 38255*w**2 + 944784)/sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)
>>> pprint(to_max)
                            ____________________________       
                           ╱      4          2                 
                     333⋅╲╱  400⋅w  - 38255⋅w  + 944784        
───────────────────────────────────────────────────────────────
   ____________________________________________________________
  ╱          8              6                4                2
╲╱  4000000⋅w  - 542790000⋅w  + 18795996600⋅w  - 11634666695⋅w 

              
              
              
──────────────
______________
              
 + 2653898256 
>>> for root in roots:
...   values.append(to_max.subs(w, root))
... 
>>> values
[0.149155702254343, 0.0284140567941140, 11.1165525231378, 11.1165525231378, 0.0284140567941140, 0.149155702254343, 333/53]
>>> roots
[-8.30464613693769, -6.80017737732967, -0.559300533997749, 0.559300533997749, 6.80017737732967, 8.30464613693769, 0]
>>> to_max
333*sqrt(400*w**4 - 38255*w**2 + 944784)/sqrt(4000000*w**8 - 542790000*w**6 + 18795996600*w**4 - 11634666695*w**2 + 2653898256)
>>> to_max.subs(w, 0.56)
11.1164780869975
>>> 
